<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jXh</title>
  <subtitle>Living and learning in Raleigh</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://henryhoo.github.io/"/>
  <updated>2016-09-15T02:30:23.000Z</updated>
  <id>http://henryhoo.github.io/</id>
  
  <author>
    <name>Henry He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ksum problem</title>
    <link href="http://henryhoo.github.io/2016/09/14/ksum-problem/"/>
    <id>http://henryhoo.github.io/2016/09/14/ksum-problem/</id>
    <published>2016-09-15T02:18:28.000Z</published>
    <updated>2016-09-15T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="General-Idea"><a href="#General-Idea" class="headerlink" title="General Idea"></a>General Idea</h4><p>If you have already read and implement the 3sum and 4sum by using the sorting approach: reduce them into 2sum at the end, you might already got the feeling that, all ksum problem can be divided into two problems:</p>
<ol>
<li>2sum Problem</li>
<li>Reduce K sum problem to K â€“ 1 sum Problem</li>
</ol>
<p>Therefore, the ideas is simple and straightforward. We could use recursive to solve this problem. Time complexity is O(N^(K-1)).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        len = nums.length;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">return</span> kSum(nums, target, <span class="number">4</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">   <span class="keyword">private</span> ArrayList&lt;List&lt;Integer&gt;&gt; kSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> k, <span class="keyword">int</span> index) &#123;</div><div class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">if</span>(index &gt;= len) &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">2</span>) &#123;</div><div class="line">        	<span class="keyword">int</span> i = index, j = len - <span class="number">1</span>;</div><div class="line">        	<span class="keyword">while</span>(i &lt; j) &#123;</div><div class="line">                <span class="comment">//find a pair</span></div><div class="line">        	    <span class="keyword">if</span>(target - nums[i] == nums[j]) &#123;</div><div class="line">        	    	List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                	temp.add(nums[i]);</div><div class="line">                	temp.add(target-nums[i]);</div><div class="line">                    res.add(temp);</div><div class="line">                    <span class="comment">//skip duplication</span></div><div class="line">                    <span class="keyword">while</span>(i&lt;j &amp;&amp; nums[i]==nums[i+<span class="number">1</span>]) i++;</div><div class="line">                    <span class="keyword">while</span>(i&lt;j &amp;&amp; nums[j-<span class="number">1</span>]==nums[j]) j--;</div><div class="line">                    i++;</div><div class="line">                    j--;</div><div class="line">                <span class="comment">//move left bound</span></div><div class="line">        	    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target - nums[i] &gt; nums[j]) &#123;</div><div class="line">        	        i++;</div><div class="line">                <span class="comment">//move right bound</span></div><div class="line">        	    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        	        j--;</div><div class="line">        	    &#125;</div><div class="line">        	&#125;</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; len - k + <span class="number">1</span>; i++) &#123;</div><div class="line">                <span class="comment">//use current number to reduce ksum into k-1sum</span></div><div class="line">                ArrayList&lt;List&lt;Integer&gt;&gt; temp = kSum(nums, target - nums[i], k-<span class="number">1</span>, i+<span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span>(temp != <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="comment">//add previous results</span></div><div class="line">                    <span class="keyword">for</span> (List&lt;Integer&gt; t : temp) &#123;</div><div class="line">                        t.add(<span class="number">0</span>, nums[i]);</div><div class="line">                    &#125;</div><div class="line">                    res.addAll(temp);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (i &lt; len-<span class="number">1</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>]) &#123;</div><div class="line">                    <span class="comment">//skip duplicated numbers</span></div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;General-Idea&quot;&gt;&lt;a href=&quot;#General-Idea&quot; class=&quot;headerlink&quot; title=&quot;General Idea&quot;&gt;&lt;/a&gt;General Idea&lt;/h4&gt;&lt;p&gt;If you have already read and i
    
    </summary>
    
    
      <category term="Leetcode, Algorithms, ksum" scheme="http://henryhoo.github.io/tags/Leetcode-Algorithms-ksum/"/>
    
  </entry>
  
  <entry>
    <title>Hashtable vs Hashmap vs Hashset in JAVA</title>
    <link href="http://henryhoo.github.io/2016/09/12/JAVA/"/>
    <id>http://henryhoo.github.io/2016/09/12/JAVA/</id>
    <published>2016-09-12T14:16:42.000Z</published>
    <updated>2016-09-15T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Both HashTable and HashMap implements Map interface.</p>
<p>##Hashtable</p>
<p>Hashtable is basically a data structure to retain values of key-value pair.</p>
<p>It does not allow null for both key and value. It will throw NullPointerException.<br>Hashtable does not maintain insertion order. The order is defined by the Hash function. So only use this if you do not need data in order.<br>It is synchronized. It is slow. Only one thread can access in one time.<br>HashTable rea thread safe.<br>HashTable uses Enumerator to iterate through elements.</p>
<p>##HashMap</p>
<p>Like Hashtable it also accepts key value pair.</p>
<p>It allows null for both key and value.<br>HashMap does not maintain insertion order. The order is defined by the Hash function.<br>It is not synchronized. It will have better performance.<br>HashMap are not thread safe, but you can use Collections.synchronizedMap(new HashMap<k,v>())</k,v></p>
<p>##HashSet</p>
<p>HashSet does not allow duplicate values.</p>
<p>It provides add method rather put method.<br>You also use its contain method to check whether the object is already available in HashSet. HashSet can be used where you want to maintain a unique list.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Both HashTable and HashMap implements Map interface.&lt;/p&gt;
&lt;p&gt;##Hashtable&lt;/p&gt;
&lt;p&gt;Hashtable is basically a data structure to retain values
    
    </summary>
    
    
      <category term="JAVA" scheme="http://henryhoo.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Hello world, welcome</title>
    <link href="http://henryhoo.github.io/2016/07/22/My-New-Post/"/>
    <id>http://henryhoo.github.io/2016/07/22/My-New-Post/</id>
    <published>2016-07-22T16:14:31.000Z</published>
    <updated>2016-09-15T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello everyone, Welcome to my space for sharing and recording.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello everyone, Welcome to my space for sharing and recording.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
