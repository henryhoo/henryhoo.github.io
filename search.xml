<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Notes of Predictably Irrational]]></title>
    <url>%2F2018%2F06%2F08%2FIrrational%2F</url>
    <content type="text"><![CDATA[My notes of duke online course dan ariely - predictably irrational Irrationality Our decisions are influenced by environment, defaults and complexity. Defaults are neither good nor bad, and it’s everywhere, we should think on when they work for us and when they not. The path of least resistance is likely when deviating from the default is complex. It’s hard for us to make evaluation Decisions are influenced by choice set Initial decision will influenced future decisions, self herding, so doubt your intuitions The psychology of moneyOpportunity costWe place higher value on specific items than the money value of those items. This is because people tend to take shortcuts when problems are complex. (Do not consider real opportunity cost) Example:$1000 Pioneer stereo VS $700 Sony stereo VS $1000 Sony stereo with $300 CD coupon Solution:We should think money in terms of opportunity cost: what you give up for choosing one thing over another RelativityWe think money in relative other than absolute. Example: Save $8 on a $16 pen VS save $8 on a $1008 projector Add $2000 for a leather seat for $39,000 car VS Add $2000 for a leather seat for $500 office seat Add feature when renovate house VS select tomato in market Earn 90K as lowest VS earn 80k as highest in different company Solution:Control range of comparison, think of absolute value. Pain of payingThere is a moral tax to consumption. Timing and method of payment affect enjoyment. Example: Pay with credit card over cash Prepaid vacation Gift remove the pain of payment Chips in casino AOL’s switch to unlimited plan quadrupled user’s usage. Application:Mortgage, User prediction, gift Mental accountingWhen money is for a specific category, we value it differently: more easily be spent. Example: Lost a ticket over same amount of money Saving interest rate and loan interest rate Solution:Partition our spending in advance and keep optimize it. Fairness and ReciprocityJudgement of fair price depends on perceived cost. We use this measurement because determine the real value is hard for us and we use shortcuts (based on effort). Example: Giving a tip to lock locksmith who broke your lock after 2 hours over the one unlock it within 2 minutes without broking it. Pay for ATM over a banker. A beer from hotel or grocery store. Solution:Express your effort. Loss aversion and endowment effectGains make us happy but losses make us really miserable. And once you own something, you start to value more on what you will give up and less on what you will gain by exchanging it. Example: Prepaid commission for sales students who have a mug not want to exchange it for a candy from students who have candy, same for the opposite Application: 401k matching from company 30 days money back guarantee Market and and social normsGifts build up social capital, while money reduce it Example: Volunteer job vs paid job Benefits of company Late fine for parents if the pick up their kid too late. Small fine actually make parents more likely to be late. Complete contract reduce social norm, and make people hard to agree on the sprit of contact. Solution:Think of where you are at the range of social norm to market norm and if it is suitable. Micro payments Keep price same make us easier to buy Consolidate multiple purchases reduce pain of paying Pre-paid option reduce micro-payment and reduce pain of paying Free version increate the barrier of purchase, largely Example: iTunes price are all $0.99 the mircopricing experiment DishonestyThe model of rational crime Lots of people cheat a little bit. People will weight rewards of cheating, possibility of being caught and punishment (Becker model: cost benefits analyses). However, dishonesty does not solely rely on cost benefits analyses. So we should consider fudge factor: People will consider themselves moral if they cheat only a little bit. Shrinking and expanding the fudge factorCheating is all about how we rationalize it. Some example of manipulate it:Shrink Being reminded of morality (however, remind afterward will not work). Expand Increase distant from money. Social acceptance (seeing others from same social group cheat). Creativity (Create story to defend yourself) Solution:Control small crimes, lots of small crimes may make a big difference. Conflicts of interestConflicts of interest operate within the fudge factor: People tend to rationalize towards benefits/rewards. Example: Data manipulate in science research. People like the art from gallery who give cash reward. Solution:Try to eliminate the result of interest conflict Cheating Over time and across culture People start to cheat a little and at some point, they start to cheat a lot. Confession provide a way to reset, which cut down the way to cheat more. People shared the same basic fudge factor across cultures. However, culture can shrink/expand fudge factor on a specific domain. Application:Reconciliation act for South Africa Guest speak Medical decisions: People tend to make different decision for their own than for others. (Peter Ubel) Moral pendulum: People tend to make up after doing bad / indulge after doing good. (Nina Mazar) Labor and MotivationWe are motivated to do things that we find meaningful. Sisyphus condition (Meaning)Doing same job repeatedly without meaning will be demotivate. And in this case, their internal love for this procedure will not reduce their demotivation. Acknowledgement It is relatively easy to make people feel good about their work. (Just a simple acknowledgement) In contrast, simply ignoring people can be as demotivating as destroying their work. SolutionInject more meaning to various situation. IKEA effect (Labor) Labor lead to love. Builder mistakenly think everyone will love it. Labor lead to love only when builder finish the task and create something. (Too much effort will have negative effect) Example Your own child. Self-designed T-shirt/shoes. Girls chased by boys ApplicationCustomization is more about preference, but the effort people put in. Not-invented-here biasIKEA effect on idea: people love their solution than others. SolutionWe should love what we do but now too much. Cognitive DissonanceWe behave one way but don’t believe in the same way. So we shift our belief afterwards. Example Boring task with high pay is boring while low pay is more interesting (people shift because they don’t want to admit they are doing boring job for low payment) Zappos hiring process (People convince they love the company because they give up $2000 by deciding join the company) Monetary Stress and Performance Bonus’s effect follows Yerkes-Dodson Curve except it is only for pure mechanical task. Keep getting bonus will lead to future loss aversion and continue to decrease performance. SolutionA state of “flow” drive the best performance (immersed in task). InspirationIs current high-tech company’s bonus system working? Social Stress and PerformanceHigher motivation does not necessarily result in better performance: Anxiety caused by public pressure impedes performance. ExampleNBA player have lower free throw rate in the last 5 minutes. Bonus, Labor and Motivation (Summary)Bonus:Small amount of money can move relationship from social to financial domain. Large amount can increase motivation but decrease performance. And we do not operate by simple rules of rewards but multiple combination. Motivation:Current world have more potential to find the meaning of our work. So A production line environment may not be as efficient as before. And people are less easy to be supervised. Solution Think of motivation not only by money: A thoughtful gift can mean much more than money bonus. Make work has meaning and trust employee to do the right thing. So that people will connect to the output. Guest speak (Lailn Anik) At different stage of life, motivation change. When facing different type task, bonus and pressure work differently. Self-controlDifficulty with self-controlPresent focus bias: Give more weight to the current state and environment. Example: Global warming and how to incentive people to help environment. Toyota Prius: Social rewards of hybrid driving. Solution Reward Substitution: Using an alternate reward that is intermediate and more motivating. Ulysses (Self-control) Contracts: Enforce self-control by removing the tempting. Distracted yourself from temptations. Eliminate decision point. (Religious people do not think of smoking on Sabbath) Maximize Reward Lotteries Randomization Counterfactuals Regret Reward Substitution FreedomFreedom reduce power of Ulysses Contracts. We must find a balance between the amount of freedom we crave and the control we need to shield us from tempting. LinksBook Notes of Predictably Irrational]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Predictably Irrational</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CO-OP at insightFinder]]></title>
    <url>%2F2018%2F05%2F31%2FWork-as-entry-level-engineer-at-start-up%2F</url>
    <content type="text"><![CDATA[After my summer internship at Facebook, I started to work at insightFinder during my second master’s year. As a star-up company, insightFinder gave me a lot of different experience than working at a large tech company such as Facebook, and taught different things. The StoryOnboardingStarting to work is quite simple here. One of my friend as well as classmate took me to our office on my first date to work. He worked here during summer and will continue for the following semester, and he will be the one to guide me. We had lunch together with two other co-workers and they introduced our overall infrastructure on the first day. Then I spent most of the day setting up my environment and making things running. Our stack includes Java backend, javascript UI, RabbitMQ, in-house C++ machine learning library and several agents on Splunk, AWS and Logstash. I was mainly focus on the backend development at that time and got a easy-fix for warm up. Struggle as a noobAt the beginning, I spent most of time learning and discussing. As I got familiar with the development cycle, I was soon assigned to improve an existing feature. This is the time I really struggle with. I know the overall structure, but I hardly understand the code base, which is to me poorly maintained and documented. I have to ask people around about how things work and where should I start with, and no one knows everything! Sometimes I have to call previous employee to get the answer and even our CEO had taught me for several times. After struggling for some days I got to know how backend is working here, and began to make progress on each tasks. Well, months later I realized the quality of work at this time is not good, code are buggy and not well formatted, and I have to rewrite some of them. But still, it feels good when making progress. Make progress and celebrateThough struggled, I was learning and finishing projects one after another. Gradually I realized there are parts of the system I was responsible for, and as a member in a small but busy team, that means you may working on things beyond coding. I started joining meetings with customers, writing user guides and things like that. It is interesting to know things like these and I feel close to the company. In the mean time the team is also making progress. We got new customers and demos came one after another. And extra hours always needed before a demo day. Life is stressful but rewarding. Good news is a new investment allows us to expand the team. We some both new-grad and senior engineers coming to reduce the burden. And a bigger office is awaiting. Dive deep with experienceAfter the first semester, I kept working on winter break. Since then I worked not only on individual feature projects but also on infrastructure design, performance improvement and reliability improve. I got the chance to resolve several data processing bottleneck which is much more challenging and interesting. Also, there are new coming engineers. And we started to enhance our code review as well as CI flow. so I started to answer questions instead of asking. I need to explain some of my work as well and assign some tasks to interns. Trying to explain and help drove me to re-think and I got deeper understanding, and make me feel I am not a noob anymore. LeavingGraduation means farewell. Last few weeks is still busy but I put some time to turn some work into a framework and hand over my things to another full time. And kept answering questions and saying goodbye by phone after leaving office. It’s my fortune to be part on this company and really hope these guys have a bright future. Some ThoughtsWhy an existing system should sucksEvery company have old, existing system and most of time we will work based on it. I was like to complain of it, as it looks big, merely maintainable, and hard to use. However, I gradually realized maybe it was good, and expandable enough when it was first developed. It only became a monster when our needs changed, or people left or simply forgot. And when we trying to replace it with a new system, the same complains started after some times because of the same reason. How to resolve this? I am not sure, maybe just kept a good development practice and a peaceful attitude when you encounter a problem. Before answer a tech questionI got a lot of questions to answer when new engineer came into team. Some days I feel like my main job is to talk and answer various questions, from infra design, code base to why a little bug happened, how to use a tool. Then I found there is something wrong with it, some questions are too simple that I don’t even need to think to give the answer, some however, I have no clue to know the answer. And sometimes, even if I have a answer, the questioner came back with another question completely different to the first one. So I start to think of how to make this communication more efficient so that I can still have time on my own work. I began to ask questioner some questions before they start their questioning: What is the task they asked you to solve? What are you working on to solve it? Do you have better plan or another idea? It is surprising efficient, most of the time they found the solution themselves, or they realized they are heading for a wrong direction. This save me the energy of doing context switch for answer a specific questions and can get back to my work easier. Prepare for meetings and reportsMeetings here are more frequent, and more roles are attending. CEO, tech lead, designer, sales, and even customer. I am not a good talker and I feel sad when my explanation is misunderstood or ignored. So make sure I kept these in mind when reporting: Make sure everyone have the same context, introduce previous context if someone is missing last time, update terms and make sure everyone is using the same. Stop taking about things others can’t understand. Not everyone knows “CPU bottleneck”, “network throughput”. Use “the user need to wait for around 10 minutes because our sever have a performance problem” instead of “our message queue is blocked because of CPU bottleneck” Kept the key point first. What problem you found, and what solution you are trying. You will lose audience when you start with introducing the root cause first. Stop meaningless talk. “It can not be done”, “It is wrong”, “It can not happened”. No one wants to hear them, talk about solution, reason instead. Start-up vs Big companyThere is much more freedom in a start-up company like this. We move faster than Facebook and it’s very exciting to see my own work delivered for a big impact. However, sometimes it is too busy and I feel a little tried. And sometimes I have work on several tasks in parallel and context switch is causing me pain and make me stressful. And there is less infrastructure to help us with the quality of work. The PicsComing soon]]></content>
      <categories>
        <category>Work experience</category>
      </categories>
      <tags>
        <tag>insightFinder</tag>
        <tag>internship</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog tutorial based on Hexo + NexT]]></title>
    <url>%2F2018%2F04%2F23%2Fmy-site-development-log-hexo-nexT-GithubPage%2F</url>
    <content type="text"><![CDATA[I played with hexo to build my first personal website on 2016. Then it was untouched for a long time until today, I decided to pick things up and try to learn some UI staff with it. This page is mainly for recording what I learnt and and how I used them on this site including 3rd party plugins, theme modification and SEO. Add pluginsGitment commentsGitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. Gitment plugin is supported in current NexT(v5.1.4), just need a few steps to set up: Create OAuth application Go to settings of your github account Go to Developer settings Click Register a new application Fill in: 1234Application name：GitmentHomepage URL：&lt;your website link&gt;Application description：&lt;Anything&gt;Authorization callback URL：&lt;your website link&gt; Copy Client ID and Client Secret for future use Create repository for gitment Create a new repository named gitment-comments Change NexT config Search gitment in config.yml12345678910111213gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more language: # Force language, or auto switch by theme github_user: # MUST HAVE, Your Github ID github_repo: `gitment-comments` # MUST HAVE, The repo you use to store Gitment comments client_id: `Client ID` # MUST HAVE, Github client id for the Gitment client_secret: `Client Secret` # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled Add various plugins based on hexo document baidu analytics addThis share leancloud_visitors Local Search Learning sourceHexoHexo搭建博客教程Hexo+NexT 博客搭建相册打造个性超赞博客Hexo+NexT+GithubPages的超深度优化 Version controlUsing Git Submodules to Manage Your Custom Hexo Theme CautionsConfig overrideWe should be careful with config override. If you want to override one item from a section, you should include other items of that section. For example, once I forget to declare other sections except “display” for sidebar config:12sidebar: display: always This cause the theme config is missing other sections including “offset” which is critical to sidebar affix. So I have a wrongly placed sidebar. I should change to following config if I want to use sidebar:1234567sidebar: position: left display: always offset: 12 b2t: false scrollpercent: false onmobile: false To do add timeline on about page Add Chinese post page Improve config override, it cause pain in the ass! Add SEO Add hot posts page]]></content>
      <categories>
        <category>UI</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nextT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to do dynamic programming]]></title>
    <url>%2F2016%2F11%2F02%2Fdp%2F</url>
    <content type="text"><![CDATA[The key for dp is to find the variables to represent the states and deduce the transition function. (aka find state -&gt; find relation -&gt; find constraints) Take Best Time to Buy and Sell Stock with Cooldown as an example: Find stateThe natural states for this problem is the 3 possible transactions : buy, sell, rest. Because the transaction sequences can end with any of these three states. For each of them we make an array, buy[n], sell[n] and rest[n]., which represents the maxProfit for any sequence end with buy/sell/rest. Find relationThen we want to deduce the transition functions for buy sell and rest. By definition we have: buy[i] = max(rest[i-1]-price, buy[i-1]) sell[i] = max(buy[i-1]+price, sell[i-1]) rest[i] = max(sell[i-1], buy[i-1], rest[i-1])Where price is the price of day i. All of these are very straightforward. They simply represents : We have to rest before we buy and we have to buy before we sell Find constraintsOne tricky point is how do you make sure you sell before you buy, since from the equations it seems that [buy, rest, buy] is entirely possible. Well, the answer lies within the fact that buy[i] &lt;= rest[i] which means rest[i] = max(sell[i-1], rest[i-1]). That made sure [buy, rest, buy] is never occurred. A further observation is that and rest[i] &lt;= sell[i] is also true therefore rest[i] = sell[i-1]Substitute this in to buy[i] we now have 2 functions instead of 3: buy[i] = max(sell[i-2]-price, buy[i-1]) sell[i] = max(buy[i-1]+price, sell[i-1]) This is better than 3, but, we can do even better Since states of day i relies only on i-1 and i-2 we can reduce the O(n) space to O(1). And here we are at our final solution: 1234567891011public int maxProfit(int[] prices) &#123; int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy; for (int price : prices) &#123; prev_buy = buy; buy = Math.max(prev_sell - price, prev_buy); prev_sell = sell; sell = Math.max(prev_buy + price, prev_sell); &#125; return sell;&#125;]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
</search>
